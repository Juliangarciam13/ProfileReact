{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/AppReact/newapp/src/Users1.jsx\";\nimport React from \"react\";\nimport usersData from \"./usersData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Users1 = () => {\n  let currentIndex = 0; // Variable to store the current index\n\n  const infoUsers = () => {\n    const card = document.getElementsByClassName(\"Card\")[0];\n    currentIndex = (currentIndex + 1) % usersData.length; // Update the current index\n\n    const user = usersData[currentIndex]; // Get the user at the updated index\n\n    card.innerHTML = `\n      <ul>\n        <li>Name: ${user.name}</li>\n        <li>Age: ${user.age}</li>\n        <li>Email: ${user.email}</li>\n      </ul>\n    `;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"ButtonUsers\",\n      onClick: infoUsers,\n      children: \"USERS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Card\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n_c = Users1;\nexport default Users1;\n/* El código comienza importando las dependencias necesarias. En este caso, importa Reacty el useRefgancho \ndel reactpaquete. También importa la usersDatamatriz del archivo local usersData.js, que presumiblemente contiene \nla información del usuario.\nEl Users1componente se define como un componente funcional. Inicializa una currentIndexvariable usando el useRefgancho. \nSe currentIndexutilizará para realizar un seguimiento del índice de usuario actual.\nLa infoUsersfunción está definida. Es responsable de actualizar la información del usuario que se muestra en la pantalla. \nDentro de la función, seleccionamos el .Cardelemento usando document.getElementsByClassName(\"Card\")[0]. Esto supone que hay un \nelemento DOM con el nombre de clase Card. Asegúrese de que dicho elemento exista en su código HTML.\nEl currentIndexse incrementa y ajusta utilizando el operador de módulo (currentIndex.current + 1) % usersData.length. Esto asegura \nque el índice permanezca dentro de los límites de la usersDatalongitud de la matriz.\nLa información de usuario correspondiente al índice actualizado se recupera de la usersDatamatriz y se almacena en la uservariable.\n\nFinalmente, el HTML interno del cardelemento se actualiza con la información del usuario usando literales de plantilla.\nLa returnsentencia define la estructura JSX del componente. Representa un <div>elemento que contiene un botón con el id ButtonUsers. \nEl onClickevento del botón se establece en la infoUsersfunción, por lo que cuando se hace clic en el botón, infoUsersse llama a la función.\n\nDebajo del botón, hay un <div>elemento con el nombre de la clase Card. Este es el contenedor donde se mostrará la información del usuario. Inicialmente, está vacío.*/\nvar _c;\n$RefreshReg$(_c, \"Users1\");","map":{"version":3,"names":["React","usersData","jsxDEV","_jsxDEV","Users1","currentIndex","infoUsers","card","document","getElementsByClassName","length","user","innerHTML","name","age","email","children","id","onClick","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/Users/macbook/Desktop/AppReact/newapp/src/Users1.jsx"],"sourcesContent":["import React from \"react\";\nimport usersData from \"./usersData\";\n\nconst Users1 = () => {\n    let currentIndex = 0; // Variable to store the current index\n\n    const infoUsers = () => {\n        const card = document.getElementsByClassName(\"Card\")[0];\n        currentIndex = (currentIndex + 1) % usersData.length; // Update the current index\n\n        const user = usersData[currentIndex]; // Get the user at the updated index\n\n        card.innerHTML = `\n      <ul>\n        <li>Name: ${user.name}</li>\n        <li>Age: ${user.age}</li>\n        <li>Email: ${user.email}</li>\n      </ul>\n    `;\n    };\n\n    return (\n        <div>\n            <button id=\"ButtonUsers\" onClick={infoUsers}>\n                USERS\n            </button>\n            <div className=\"Card\"></div>\n        </div>\n    );\n};\n\nexport default Users1;\n/* El código comienza importando las dependencias necesarias. En este caso, importa Reacty el useRefgancho \ndel reactpaquete. También importa la usersDatamatriz del archivo local usersData.js, que presumiblemente contiene \nla información del usuario.\nEl Users1componente se define como un componente funcional. Inicializa una currentIndexvariable usando el useRefgancho. \nSe currentIndexutilizará para realizar un seguimiento del índice de usuario actual.\nLa infoUsersfunción está definida. Es responsable de actualizar la información del usuario que se muestra en la pantalla. \nDentro de la función, seleccionamos el .Cardelemento usando document.getElementsByClassName(\"Card\")[0]. Esto supone que hay un \nelemento DOM con el nombre de clase Card. Asegúrese de que dicho elemento exista en su código HTML.\nEl currentIndexse incrementa y ajusta utilizando el operador de módulo (currentIndex.current + 1) % usersData.length. Esto asegura \nque el índice permanezca dentro de los límites de la usersDatalongitud de la matriz.\nLa información de usuario correspondiente al índice actualizado se recupera de la usersDatamatriz y se almacena en la uservariable.\n\nFinalmente, el HTML interno del cardelemento se actualiza con la información del usuario usando literales de plantilla.\nLa returnsentencia define la estructura JSX del componente. Representa un <div>elemento que contiene un botón con el id ButtonUsers. \nEl onClickevento del botón se establece en la infoUsersfunción, por lo que cuando se hace clic en el botón, infoUsersse llama a la función.\n\nDebajo del botón, hay un <div>elemento con el nombre de la clase Card. Este es el contenedor donde se mostrará la información del usuario. Inicialmente, está vacío.*/"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,MAAM,GAAGA,CAAA,KAAM;EACjB,IAAIC,YAAY,GAAG,CAAC,CAAC,CAAC;;EAEtB,MAAMC,SAAS,GAAGA,CAAA,KAAM;IACpB,MAAMC,IAAI,GAAGC,QAAQ,CAACC,sBAAsB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACvDJ,YAAY,GAAG,CAACA,YAAY,GAAG,CAAC,IAAIJ,SAAS,CAACS,MAAM,CAAC,CAAC;;IAEtD,MAAMC,IAAI,GAAGV,SAAS,CAACI,YAAY,CAAC,CAAC,CAAC;;IAEtCE,IAAI,CAACK,SAAS,GAAI;AAC1B;AACA,oBAAoBD,IAAI,CAACE,IAAK;AAC9B,mBAAmBF,IAAI,CAACG,GAAI;AAC5B,qBAAqBH,IAAI,CAACI,KAAM;AAChC;AACA,KAAK;EACD,CAAC;EAED,oBACIZ,OAAA;IAAAa,QAAA,gBACIb,OAAA;MAAQc,EAAE,EAAC,aAAa;MAACC,OAAO,EAAEZ,SAAU;MAAAU,QAAA,EAAC;IAE7C;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACTnB,OAAA;MAAKoB,SAAS,EAAC;IAAM;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3B,CAAC;AAEd,CAAC;AAACE,EAAA,GA1BIpB,MAAM;AA4BZ,eAAeA,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}