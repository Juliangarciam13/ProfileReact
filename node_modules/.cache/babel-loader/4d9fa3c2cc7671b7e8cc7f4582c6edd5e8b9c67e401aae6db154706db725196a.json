{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/AppReact/newapp/src/Users1.jsx\";\nimport React from \"react\";\nimport usersData from \"./usersData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Users1 = () => {\n  let currentIndex = 0;\n  const infoUsers = () => {\n    const card = document.getElementsByClassName(\"Card\")[0];\n    currentIndex = (currentIndex + 1) % usersData.length;\n    const user = usersData[currentIndex];\n    card.innerHTML = `\n        <ul>\n            <li>Name: ${user.name}</li>\n            <li>Age: ${user.age}</li>\n            <li>Email: ${user.email}</li>\n        </ul>\n    `;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"ButtonUsers\",\n      onClick: infoUsers,\n      children: \"USERS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Card\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n_c = Users1;\nexport default Users1;\n\n/* El Users1 componente se define como un componente funcional mediante la sintaxis de la función de flecha.\nLa currentIndex variable se declara fuera de la función del componente mediante la let palabra clave. Almacenará \nel índice actual del usuario que se muestra.\nLa infoUsers función está definida. Esta función se activará cuando se haga clic en el botón para actualizar la \ninformación del usuario. Dentro de la infoUsersfunción, se currentIndex incrementa en 1 y se envuelve dentro de \nlos límites de la usersDatalongitud de la matriz mediante el operador de módulo ( %). Esto garantiza que el índice\nsiga siendo válido incluso si llega al final de la matriz, lo que permite a los usuarios desplazarse por la lista.\nA la user variable se le asigna el objeto de usuario de la usersData matriz en función del archivo currentIndex. Esto \nrepresenta al usuario cuya información se mostrará.\nA la card variable se le asigna el primer elemento con el nombre de clase \"Tarjeta\" usando document.getElementsByClassName. \nEste elemento representa la tarjeta donde se mostrará la información del usuario.\nLa innerHTMLpropiedad del cardelemento se actualiza con una cadena de plantilla que contiene una lista desordenada ( <ul>) \nque muestra el nombre, la edad y el correo electrónico del usuario. Los valores se interpolan dinámicamente utilizando las \npropiedades del userobjeto.\nEl código JSX dentro de la returninstrucción representa la estructura de la interfaz de usuario del componente.\nConsta de un <div>elemento que envuelve el botón y la tarjeta.\nEl botón se representa con el texto \"USUARIOS\" y un onClickcontrolador de eventos asignado a la infoUsersfunción.\nLa tarjeta está representada por un <div>elemento con el nombre de clase \"Card\". Inicialmente, está vacío y se actualizará dinámicamente \ncuando se haga clic en el botón.*/\nvar _c;\n$RefreshReg$(_c, \"Users1\");","map":{"version":3,"names":["React","usersData","jsxDEV","_jsxDEV","Users1","currentIndex","infoUsers","card","document","getElementsByClassName","length","user","innerHTML","name","age","email","children","id","onClick","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/Users/macbook/Desktop/AppReact/newapp/src/Users1.jsx"],"sourcesContent":["import React from \"react\";\nimport usersData from \"./usersData\";\n\nconst Users1 = () => {\n    let currentIndex = 0; \n\n    const infoUsers = () => {\n        const card = document.getElementsByClassName(\"Card\")[0];\n        currentIndex = (currentIndex + 1) % usersData.length; \n\n        const user = usersData[currentIndex]; \n\n        card.innerHTML = `\n        <ul>\n            <li>Name: ${user.name}</li>\n            <li>Age: ${user.age}</li>\n            <li>Email: ${user.email}</li>\n        </ul>\n    `;\n    };\n\n    return (\n        <div>\n            <button id=\"ButtonUsers\" onClick={infoUsers}>\n                USERS\n            </button>\n            <div className=\"Card\"></div>\n        </div>\n    );\n};\n\nexport default Users1;\n\n\n\n\n\n/* El Users1 componente se define como un componente funcional mediante la sintaxis de la función de flecha.\nLa currentIndex variable se declara fuera de la función del componente mediante la let palabra clave. Almacenará \nel índice actual del usuario que se muestra.\nLa infoUsers función está definida. Esta función se activará cuando se haga clic en el botón para actualizar la \ninformación del usuario. Dentro de la infoUsersfunción, se currentIndex incrementa en 1 y se envuelve dentro de \nlos límites de la usersDatalongitud de la matriz mediante el operador de módulo ( %). Esto garantiza que el índice\nsiga siendo válido incluso si llega al final de la matriz, lo que permite a los usuarios desplazarse por la lista.\nA la user variable se le asigna el objeto de usuario de la usersData matriz en función del archivo currentIndex. Esto \nrepresenta al usuario cuya información se mostrará.\nA la card variable se le asigna el primer elemento con el nombre de clase \"Tarjeta\" usando document.getElementsByClassName. \nEste elemento representa la tarjeta donde se mostrará la información del usuario.\nLa innerHTMLpropiedad del cardelemento se actualiza con una cadena de plantilla que contiene una lista desordenada ( <ul>) \nque muestra el nombre, la edad y el correo electrónico del usuario. Los valores se interpolan dinámicamente utilizando las \npropiedades del userobjeto.\nEl código JSX dentro de la returninstrucción representa la estructura de la interfaz de usuario del componente.\nConsta de un <div>elemento que envuelve el botón y la tarjeta.\nEl botón se representa con el texto \"USUARIOS\" y un onClickcontrolador de eventos asignado a la infoUsersfunción.\nLa tarjeta está representada por un <div>elemento con el nombre de clase \"Card\". Inicialmente, está vacío y se actualizará dinámicamente \ncuando se haga clic en el botón.*/"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,MAAM,GAAGA,CAAA,KAAM;EACjB,IAAIC,YAAY,GAAG,CAAC;EAEpB,MAAMC,SAAS,GAAGA,CAAA,KAAM;IACpB,MAAMC,IAAI,GAAGC,QAAQ,CAACC,sBAAsB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACvDJ,YAAY,GAAG,CAACA,YAAY,GAAG,CAAC,IAAIJ,SAAS,CAACS,MAAM;IAEpD,MAAMC,IAAI,GAAGV,SAAS,CAACI,YAAY,CAAC;IAEpCE,IAAI,CAACK,SAAS,GAAI;AAC1B;AACA,wBAAwBD,IAAI,CAACE,IAAK;AAClC,uBAAuBF,IAAI,CAACG,GAAI;AAChC,yBAAyBH,IAAI,CAACI,KAAM;AACpC;AACA,KAAK;EACD,CAAC;EAED,oBACIZ,OAAA;IAAAa,QAAA,gBACIb,OAAA;MAAQc,EAAE,EAAC,aAAa;MAACC,OAAO,EAAEZ,SAAU;MAAAU,QAAA,EAAC;IAE7C;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACTnB,OAAA;MAAKoB,SAAS,EAAC;IAAM;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3B,CAAC;AAEd,CAAC;AAACE,EAAA,GA1BIpB,MAAM;AA4BZ,eAAeA,MAAM;;AAMrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}